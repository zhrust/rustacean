<?xml version="1.0" encoding="utf-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>be Rustaceans ~ 成锈纪</title><link>https://rs.101.so</link><description>~ 汇集 大妈/Zoom.Quiet 学习/实践/探索/... Rust 世界锈迹, 一起成为 Rustacean 吧...</description><generator>my_rss_generator</generator><item><title>past_ampersand-driven_development.md</title><link>https://rs.101.so//101/past_ampersand-driven_development</link><pubDate>Wed, 22 Mar 2023 00:24:14 +0800</pubDate><content:encoded><![CDATA[# 克服 "& 驱动开发"
原文: [Getting Past “Ampersand-Driven Development” in Rust - Blog](https://fiberplane.com/blog/getting-past-ampersand-driven-development-in-rust)

## background

[RR23W10 - 锈周刊 -> Weekly :: China<Rustaceans>](https://weekly.rs.101.so/abt/index.html) 中发现好文,
译来细读....

## 快译
> A little mental model for ownership and borrowing

所有权和借用的小小心智模型.

我是在一次 [Tad Lispy](https://www.youtube.com/watch?v=lsnksAMpUvM)
的演讲中听到 "& 符号驱动开发"这词儿的,
非常精确的捕捉到了很多 Rust 新人开发时,
下意识的随机插入 & 符号来安抚编译的行为.

此文, 描述了我想向 Rust 新手解释的一个心智模型，
涉及 &,&mut,所有权, Rcs 和 Arcs 之间的区别;
我希望你或是其它有抱负的 Rustacean 们对此感觉有用.

### 引用 (&variable)

让我们从 & 符号开始,
真是个可怕的符号;
在 Rust 中随处可见 --- 如果你首次尝试编写一些 Rust 代码,
可能不到 10 分钟,
Rust 编译器就会烦人的或是有用的告诉你,
在哪儿需要放置一个 &;

想象一下,我们有个计算字符串长度的简单函数;
此函数需要查阅字符串;
但是, 需要所有权进行修改嘛?不;
当长度函数完成时,我们应该从内存中删除字符串嘛? 也不需要;
这意味着长度函数嘦读取访问权,
只是要字符串的临时视图而不是永久版本;

这就是 &变量 符号在 Rust 中的含义;
想想一个小孩子将最喜欢的玩具借给另外一个孩子时说:
"你可以看, 但是, 不能摸; 当你看完后, 我想立即拿回来;"
这就是共享引用;

![Midjourney](https://framerusercontent.com/images/5LwiCYhw088dpelWzFCkp9MWSo.png)


> 图片由 Evan Schwartz 使用 Midjourney 创作


### 可变引 (&mut variable)

那么 &mut 变量又是怎么回事儿?

让我们想象一下在给定字符串前追加 "hello" 的函数,
而不是我们的字符串长度函数;
在这种情况中,
我们硬骨头希望函数修改给进来的数据;
这时,我们就需要 &mut 或说 可变引用;

想想我们的小孩子借一本涂色书给朋友,
让他在一页上色,说:"你可以看以及摸---但是,
当你完成后, 我仍然想要回来";


![Evan Schwartz](https://framerusercontent.com/images/0Y2RBZro7ESbqJzViLGIqfvccY.png)

> 图片由 Evan Schwartz 使用 Midjourney 创作


#### 可变引用是独占的

这里解释关于 Rust 微妙又非常聪明的设计最好的场景之一;

如果某人(或是你的代码的某部分)有一个对某个值的可变袭用,
Rust 编译器会确保绝对没有其它人可以再次引用;
为什么?
因为, 如果你正在查看某个你认为不可变的值,
当然不会在你使用其过程中又和维其它人意外的变更这个对象
(对于我们上面提及的字符串长度函数,
你就知道如果允许, 那得多令人困惑?)

另外一层含义是,
如果任何人对一个值有一个不可变袭用,
我们就不能更改它, 又或是给出另外一个可变引用;


### 值的拥有 (variable)

接下来,我们将讨论 值的拥有;

Rust 的另外一个聪明之处,
在于如何确定何时应该忘记或是从内存中删除一个值;
每当函数完成后, 其中声明的所有值都将被删除或是自动清除;

好吧, 这并不是真的;
如果我们再次考虑字符串长度函数,
就知道, 我们并不希望字符串在长度函数完成时就被完全遗忘/删除;
和追加 hello 函数相同;
在这些情况中, 只会清除对该值的引用,
但是,不会删除实际值;

那么, 将我们向 HashMap 中插入一些东西时又如何?
在这种场景中,
我们希望给定的字符串输入成为 HashMap 的一部分;
希望该值现在由 HashMap 拥有;

想象一个小孩赠送他们的玩具之一时说:
"给, 你可以拿来作任何你想作的事儿,我不需要拿回来了,
享受吧!"
(即便是想象中的孩子, 也需要相当成熟成千可能令此场景可信哪...)


### 引用计数指针 (Rc 和 Arc)

我们在 Rust 中还有另外两种值类型是 Rc 和 Arc;

对于 Rc, 想象孩子生日派对上的装饰品,
例如气球;
当所有人都取信在那里时,
我们希望每个人都看着, 但是不要触摸装饰品;
我们希望装饰品一直保持到最后一个孩子离开时;
但是, 嘦最后一个熊孩子离开,
我们就可以立即开始清理装饰品;
这就是一个 Rc 或是引用计数指针;

Rc 跟踪有多少人(或是代码的一部分)
正在查看, 并保持该值, 直到最后一个引用被删除的那一刻;

如果你正在使用异步或是多线程代码,
你将使用 Arc 或是原子引用计数指针,
但是, 和 Rc 的想法相同;

效果也是: 大家看看装饰品,
晚会一结束我们就收拾干净;

### 结论
作为最后的总结,
你可以根据以下问题, 来决策应该使用那种类型的值:

![Conclusion](https://framerusercontent.com/images/mH73ms5JxUOiNWhWMA8UKtAX7Y.jpg)


|     |&var\n(不可变引)|&mut var\n(可变引用)|var\n(拥有值)|Rc
\n(引用计数指针)|Arc\n(原子引用计数指针)|
| --- | --- | --- | --- | --- | --- |
|可读?|✔︎|✔︎|✔︎|✔︎|✔︎|
|可写?|✘|✔︎|✔︎|仅当包装为 Cell/RefCell|O仅当包装为 Mutex/RwLock|
|函数结束时丢弃?|✘|✘|✔︎|仅在 Rc 最后的克隆被丢弃后|仅当 Arc 的克隆被丢弃后|
|多线程可用?|✘ 注1|✘|值可以在线程间移动\n但不同线程不可同时访问|   ✘  |✔︎|

> 注1: (Unless it has a
'static lifetime, meaning it will exist as long as all of the threads, or is used in a scoped thread)

Ampersands are one of the scariest or least familiar parts when coming to Rust from a higher-level language like Typescript. But I promise that after some practice, it’ll feel much more intuitive when writing code to know whether a function should take a mutable or immutable reference, or to know whether some other library’s function will likely want a reference or owned value. Without the need for ampersand-driven development.

For more details, you can also take a look at the Rust language doc sections on 
[References and Borrowing](https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html)

 and 
 [What is Ownership?](https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html)
 ?.

[Evan Schwartz](https://github.com/emschwartz)
is a Principal Rust Engineer at Fiberplane. He is the creator of 

[Autometrics](https://github.com/autometrics-dev/autometrics-rs)

 , a new crate that makes it easy to understand the error rate, latency, and production usage of any function in your code.

## refer.

... TBD



```
          _~`+∽~_
      \/ /  = ◶  \ (/
        '_   𝟂   _'
        | '-----' /

...act by ferris-actor v0.2.4 (built on 23.0303.201916)
```
]]></content:encoded></item><item><title>two_kinds_assert_make_better_code.md</title><link>https://rs.101.so//tip/two_kinds_assert_make_better_code</link><pubDate>Mon, 20 Mar 2023 15:46:43 +0800</pubDate><content:encoded><![CDATA[# 两种'Assert'构建清晰代码
> tips...重要也不重要

原文: [Laurence Tratt: Rust's Two Kinds of 'Assert' Make for Better Code](https://tratt.net/laurie/blog/2023/rusts_two_kinds_of_assert_make_for_better_code.html)


## 快译



Daniel Lemire's recent post "runtime asserts are not free" looks at the run-time cost of assert statements in C and shows that a simple assert in a frequently executed loop can cause significant overhead.
My own opinion on assertions has shifted over the years, from "I don't see the point" to "use them sparingly" to "use them as much as possible". That last shift is largely due to Rust having two kinds of "assert" statement – assert and debug_assert – which has allowed me to accurately express two different kinds of assertions, largely freeing me from performance worries. If you come from a language that only has one kind of assert statement, this distinction can seem pointless, so in this post I want to briefly explain why it helped shift my thinking.

Background
Let me quickly define what I mean by an "assert": it's a programming language statement that checks a property and causes a crash if that property does not hold (conventionally called a "failing assert"). For example, if I have a Python program with a list of people's ages and calculate the minimum age, I might want to check that the youngest person doesn't have a negative age:

ages = [...]
youngest = min(ages)
assert(youngest >= 0)
If ages contains a negative value – or if min doesn't work correctly! – the assert will fail and cause a run-time exception:
Traceback (most recent call last):
  File "/tmp/t.py", line 3, in 
    assert(youngest >= 0)
AssertionError
In other words, writing assert is roughly equivalent to:
ages = [...]
youngest = min(ages)
if not (youngest >= 0):
  raise AssertionError
In practise, asserts are mostly used to check assumptions about a program's state — in this case, that at no point has a negative age entered into the system.
There are two major reasons why I might want to check this particular assumption. First, I might have written subsequent code which will only execute correctly with non-negative youngest values: I want to prevent that subsequent code from executing if that property is violated. Second, the assert both documents and checks the property. In other words, I could just have written a comment:

ages = [...]
youngest = min(ages)
# youngest must be non-negative or bad things will happen below
...
That comment accurately describes the program's assumption, but if the assumption is incorrect – perhaps because another part of the program uses -1 to mean "we don't know how old this person is" – the threatened "bad things" will occur. If I'm lucky, the effects will be relatively benign, and perhaps even invisible. But, if I'm unlucky, genuinely bad things will occur, ranging from odd output to security vulnerabilities.
Debugging incorrect assumptions of this sort is hard, because the effect of the assumption's violation is generally only noticed long after the violation occurred. It's not unusual for some poor programmer to spend a day or more hunting down a problem only to find that it was caused by the violation of a simple assumption. In contrast, the assert causes my program to crash predictably, with a clear report, and at the earliest possible opportunity. In general, fixing the causes of failing asserts tends to be relatively simple.

Why asserts are used less often than one might think
As I've described them above, asserts sound like a clear win — but most programs use many fewer asserts than one might hope.
The most obvious reason for this is that programmers often don't realise the assumptions they're embedding in their programs, or don't consider the consequences of their assumptions. This tends to be particularly true for junior programmers, who have not yet built up scar tissue from multi-day debugging sessions that were necessary only because they didn't think to use asserts. It took me many years of programming before I realised how much time I was wasting by not thinking about, and checking with asserts, my assumptions about a program's properties.

Sometimes it's also very difficult to work out how to assert the property one cares about. This is particularly true in languages like C where there is no built-in help to express properties such as "no element in the list can be negative". The lengthier, and more difficult, an assert needs to be – particularly if it needs a helper function – the less likely it is to be written down.

Inevitably, some asserts are plain wrong, either expressing an incorrect property, or expressing correct property incorrectly. I think most of us expect such mistakes. However, what many people don't realise is that asserts can change a program's behaviour if they have side effects. I have shot myself in the foot more than once by copying and pasting code such as l[i++] into an assert, causing the program to execute differently depending on whether the assert is compiled in or not. I view this as inevitable stupidity on my part, rather than a flaw in the concept of asserts, but I have heard of at least one organisation that bans (or, at least, banned) asserts because of this issue.

Performance issues
Daniel pointed out a very different reason for avoiding asserts: they can cause serious performance issues when used in the "wrong" places. An assert introduces a branch (i.e. an "if") which must be executed at run-time [1]. The existence of an assert can also cause a compiler to miss compile-time optimisation opportunities [2]. There is a general fear in the programming community about the performance costs of asserts, even though none of us can know how they impact a given program without actually measuring it.
To avoid performance issues, most software is compiled in either "debug" (sometimes called "testing") or "release" modes: in debug mode, asserts are compiled in and checked at run-time; but in release mode, the asserts are not compiled in, and thus not checked at run-time. In languages like C, there isn't a standard concept of "debug" and "release" modes, but many people consider "release" mode to imply adding a flag -DNDEBUG, which causes assert to become a no-op. Rust's standard Cargo build system defaults to debug mode, with --release performing a release build.

Two kinds of asserts
While not compiling (and thus not checking) asserts in release mode removes performance problems, it also weakens the guarantees we have about a program's correctness — just because a test suite doesn't violate an assumption doesn't mean that real users won't use the program in a way which does.
These days I thus view asserts as falling into two categories:

Checking problem domain assumptions.
Checking internal assumptions.
That distinction might seem artificial, perhaps even non-existent, so let me give examples of what I mean.
The first category contains assumptions about the "real world" problem my program is trying to help solve. For example, if I'm writing a warehouse stock system, parts of my program might assume properties such as "an item's barcode is never empty".

The second category contains assumptions about the way I've structured my program. For example, I might have written a function which runs much faster if I assume the input integer is greater than 1. It's probable that, at the time I write that function, I won't call it in a way that violates that property: but later programmers (including me!) will quite possibly forget, or not notice, that property. An assertion is thus particularly helpful for future programmers, especially when they're refactoring code, to give them greater confidence that they haven't broken the program in subtle ways.

What it took me years to realise is that I have very different confidence levels about my assumptions in each category. I have high confidence that violations of my assumptions in the second category will be caught during normal testing. However, I have much lower confidence that violations of my assumptions in the first category will be caught during testing.

My differing confidence levels shouldn't be surprising — after all, I've been hired because I can program, not because I know much about warehouse stock systems or barcodes! However, since "normal testing" implies "debug mode" and "user is running the program" implies "release mode", it means that the assumptions I am least confident are not exercised when they're most needed.

Two kinds of assert statement
The problem that I've just expressed ultimately occurs because languages like C force us to encode both kinds of assumption with a single assert statement: either all asserts are compiled in or none are.
I long considered this inevitable, but when I moved to Rust several years back, I slowly realised that I now had access to two kinds of assert statement. debug_assert is rather like assert in C, in the sense that the assumptions it expresses are only checked in debug mode. In contrast, assert is "always checked in both debug and release builds, and cannot be disabled."

This might seem like a small difference, but for me it completely unlocked the power of assertions. If you look at a lot of the code I now write, you'll see liberal use of debug_assert, often checking quite minor assumptions, including those I never think likely to be violated. I never even think, let alone worry, about the performance impact of debug_assert. But occasionally you'll spot an assert, sometimes even in fairly frequently executed code — those are where I'm checking particularly important assumptions, or assumptions in which I have particularly low confidence. Each time I write assert I think about the possible performance impact, and also about whether there's a way I can increase my confidence in the assumption to the point that I can downgrade it to a debug_assert. Similarly, when it comes to debugging, I often check assert statements quite carefully as they indicate my low confidence in a particular assumption: it's more likely that I have to reconsider an assert than a debug_assert.

Of course, there's no reason why you can't write your own equivalents of assert and debug_assert in C, or any other language, but having them built into a language (or standard library), where their differing motivations are clearly documented and widely understood, makes it much easier to use them freely. I hope languages other than Rust will continue to make this difference in assertions — though I would prefer a shorter name than "debug_assert"!






```
          _~`|`~_
      \) /  ← ◷  \ \/
        '_   V   _'
        \ '--∽--' )

...act by ferris-actor v0.2.4 (built on 23.0303.201916)
```]]></content:encoded></item><item><title>clear_explanation_rust_modele_system.md</title><link>https://rs.101.so//tip/clear_explanation_rust_modele_system</link><pubDate>Mon, 20 Mar 2023 15:44:06 +0800</pubDate><content:encoded><![CDATA[# 清晰解释Rust模块系统
> tips...重要也不重要

原文: [Clear explanation of Rust’s module system](https://www.sheshbabu.com/posts/rust-module-system/)

## 快译



Rust’s module system is surprisingly confusing and causes a lot of frustration for beginners.

In this post, I’ll explain the module system using practical examples so you get a clear understanding of how it works and can immediately start applying this in your projects.

Since Rust’s module system is quite unique, I request the reader to read this post with an open mind and resist comparing it with how modules work in other languages.

Let’s use this file structure to simulate a real world project:

my_project
├── Cargo.toml
└─┬ src
  ├── main.rs
  ├── config.rs
  ├─┬ routes
  │ ├── health_route.rs
  │ └── user_route.rs
  └─┬ models
    └── user_model.rs
These are the different ways we should be able to consume our modules:



These 3 examples should be sufficient to explain how Rust’s module system works.

Example 1
Let’s start with the first example - importing config.rs in main.rs.

// main.rs
fn main() {
  println!("main");
}
// config.rs
fn print_config() {
  println!("config");
}
The first mistake that everyone makes is just because we have files like config.rs, health_route.rs etc, we think that these files are modules and we can import them from other files.

Here’s what we see (file system tree) and what the compiler sees (module tree):



Surprisingly, the compiler only sees the crate module which is our main.rs file. This is because we need to explicitly build the module tree in Rust - there’s no implicit mapping between file system tree to module tree.

We need to explicitly build the module tree in Rust, there’s no implicit mapping to file system

To add a file to the module tree, we need to declare that file as a submodule using the mod keyword. The next thing that confuses people is that you would assume we declare a file as module in the same file. But we need to declare this in a different file! Since we only have main.rs in the module tree, let’s declare config.rs as a submodule in main.rs.

The mod keyword declares a submodule

The mod keyword has this syntax:

mod my_module;
Here, the compiler looks for my_module.rs or my_module/mod.rs in the same directory.

my_project
├── Cargo.toml
└─┬ src
  ├── main.rs
  └── my_module.rs

or

my_project
├── Cargo.toml
└─┬ src
  ├── main.rs
  └─┬ my_module
    └── mod.rs
Since main.rs and config.rs are in the same directory, let’s declare the config module as follows:

// main.rs
+ mod config;

fn main() {
+ config::print_config();
  println!("main");
}
// config.rs
fn print_config() {
  println!("config");
}
We’re accessing the print_config function using the :: syntax.

Here’s how the module tree looks like:



We’ve successfully declared the config module! But this is not sufficient to be able to call the print_config function inside config.rs. Almost everything in Rust is private by default, we need to make the function public using the pub keyword:

The pub keyword makes things public

// main.rs
mod config;

fn main() {
  config::print_config();
  println!("main");
}
// config.rs
- fn print_config() {
+ pub fn print_config() {
  println!("config");
}
Now, this works. We’ve successfully called a function defined in a different file!

Example 2
Let’s try calling the print_health_route function defined in routes/health_route.rs from main.rs.

// main.rs
mod config;

fn main() {
  config::print_config();
  println!("main");
}
// routes/health_route.rs
fn print_health_route() {
  println!("health_route");
}
As we discussed earlier, we can use the mod keyword only for my_module.rs or my_module/mod.rs in the same directory.

So in order to call functions inside routes/health_route.rs from main.rs, we need to do the following things:

Create a file named routes/mod.rs and declare the routes submodule in main.rs
Declare the health_route submodule in routes/mod.rs and make it public
Make the functions inside health_route.rs public
my_project
├── Cargo.toml
└─┬ src
  ├── main.rs
  ├── config.rs
  ├─┬ routes
+ │ ├── mod.rs
  │ ├── health_route.rs
  │ └── user_route.rs
  └─┬ models
    └── user_model.rs
// main.rs
mod config;
+ mod routes;

fn main() {
+ routes::health_route::print_health_route();
  config::print_config();
  println!("main");
}
// routes/mod.rs
+ pub mod health_route;
// routes/health_route.rs
- fn print_health_route() {
+ pub fn print_health_route() {
  println!("health_route");
}
Here’s how the module tree looks like:



We can now call a function defined in a file inside a folder.

Example 3
Let’s try calling from main.rs => routes/user_route.rs => models/user_model.rs

// main.rs
mod config;
mod routes;

fn main() {
  routes::health_route::print_health_route();
  config::print_config();
  println!("main");
}
// routes/user_route.rs
fn print_user_route() {
  println!("user_route");
}
// models/user_model.rs
fn print_user_model() {
  println!("user_model");
}
We want to call the function print_user_model from print_user_route from main.

Let’s make the same changes as before - declaring submodules, making functions public and adding the mod.rs file.

my_project
├── Cargo.toml
└─┬ src
  ├── main.rs
  ├── config.rs
  ├─┬ routes
  │ ├── mod.rs
  │ ├── health_route.rs
  │ └── user_route.rs
  └─┬ models
+   ├── mod.rs
    └── user_model.rs
// main.rs
mod config;
mod routes;
+ mod models;

fn main() {
  routes::health_route::print_health_route();
+ routes::user_route::print_user_route();
  config::print_config();
  println!("main");
}
// routes/mod.rs
pub mod health_route;
+ pub mod user_route;
// routes/user_route.rs
- fn print_user_route() {
+ pub fn print_user_route() {
  println!("user_route");
}
// models/mod.rs
+ pub mod user_model;
// models/user_model.rs
- fn print_user_model() {
+ pub fn print_user_model() {
  println!("user_model");
}
Here’s how the module tree looks like:



Wait, we haven’t actually called print_user_model from print_user_route! So far, we’ve only called the functions defined in other modules from main.rs, how do we do that from other files?

If we look at our module tree, the print_user_model function sits in the crate::models::user_model path. So in order to use a module in files that are not main.rs, we should think in terms of the path necessary to reach that module in the module tree.

// routes/user_route.rs
pub fn print_user_route() {
+ crate::models::user_model::print_user_model();
  println!("user_route");
}
We’ve successfully called a function defined in a file from a file that’s not main.rs.

super
The fully qualified name gets too lengthy if our file organization is multiple directories deep. Let’s say for whatever reason, we want to call print_health_route from print_user_route. These are under the paths crate::routes::health_route and crate::routes::user_route respectively.

We can call it by using the fully qualified name crate::routes::health_route::print_health_route() but we can also use a relative path super::health_route::print_health_route();. Notice that we’ve used super to refer to the parent scope.

The super keyword in module path refers to the parent scope

pub fn print_user_route() {
  crate::routes::health_route::print_health_route();
  // can also be called using
  super::health_route::print_health_route();

  println!("user_route");
}
use
It would be tedious to use the fully qualified name or even the relative name in the above examples. In order to shorten the names, we can use the use keyword to bind the path to a new name or alias.

The use keyword is used to shorten the module path

pub fn print_user_route() {
  crate::models::user_model::print_user_model();
  println!("user_route");
}
The above code can be refactored as:

use crate::models::user_model::print_user_model;

pub fn print_user_route() {
  print_user_model();
  println!("user_route");
}
Instead of using the name print_user_model, we can also alias it to something else:

use crate::models::user_model::print_user_model as log_user_model;

pub fn print_user_route() {
  log_user_model();
  println!("user_route");
}
External modules
Dependencies added to Cargo.toml are available globally to all modules inside the project. We don’t need to explicitly import or declare anything to use a dependency.

External dependencies are globally available to all modules inside a project

For example, let’s say we added the rand crate to our project. We can use it in our code directly as:

pub fn print_health_route() {
  let random_number: u8 = rand::random();
  println!("{}", random_number);
  println!("health_route");
}
We can also use use to shorten the path:

use rand::random;

pub fn print_health_route() {
  let random_number: u8 = random();
  println!("{}", random_number);
  println!("health_route");
}
Summary
The module system is explicit - there’s no 1:1 mapping with file system
We declare a file as module in its parent, not in itself
The mod keyword is used to declare submodules
We need to explicitly declare functions, structs etc as public so they can be consumed in other modules
The pub keyword makes things public
The use keyword is used to shorten the module path
We don’t need to explicitly declare 3rd party modules
Thanks for reading! Feel free to follow me in Twitter for more posts like this :)





```
         _~^*∽~_
     \/ /  # ◵  \ (/
       '_   ⩌   _'
       | '--+--' )

...act by ferris-actor v0.2.4 (built on 23.0303.201916)
```]]></content:encoded></item><item><title>emb_rpi02w.md</title><link>https://rs.101.so//dev/emb_rpi02w</link><pubDate>Fri, 17 Mar 2023 09:45:32 +0800</pubDate><content:encoded><![CDATA[# Raspberry Pi Zero 2 w
> 最便宜的开发板了...

## background

Why not?

## goal

作为上位机和 Pico 连接起来折腾点儿事儿。。。

## trace

### HX1838
> ... 接入标准 HX1838 红外接收器的需求。需要使用 Rust 语言提供的 GPIO 库来控制 Raspberry Pi 的 GPIO 引脚，以及使用 Rust 的外部库来读取红外信号。具体的实现步骤如下：

1. 配置环境

首先需要安装 Rust 工具链，可以在 Raspberry Pi zero 2w 上使用以下命令进行安装：

```
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
```

安装完成后，需要安装对应的交叉编译工具链，以便于在 Raspberry Pi zero 2w 上编译 ARM 版本的代码。可以使用以下命令进行安装：

```
rustup target add armv7-unknown-linux-gnueabihf
```

2. 连接硬件

将 HX1838 红外接收器连接到 Raspberry Pi 的 GPIO 引脚上。可以参考 HX1838 的数据手册来确定连接方式。

3. 编写代码

首先需要导入 GPIO 库和外部库，可以在项目的 Cargo.toml 文件中添加以下依赖：

```
[dependencies]
rppal = "0.12.2"
rust-hx711 = "0.1.0"
```

然后编写 Rust 代码，示例代码如下：

```rust
use rppal::gpio::{Gpio, Level, Mode};
use rust_hx711::HX711;

fn main() {
    let gpio = Gpio::new().unwrap();
    let mut pin = gpio.get(17).unwrap().into_input_pullup();
    let mut hx711 = HX711::new(18, 27).unwrap();

    loop {
        if pin.read() == Level::Low {
            let reading = hx711.read().unwrap();
            println!("Reading: {}", reading);
        }
    }
}
```

代码中的 `gpio.get(17)` 表示通过 GPIO 引脚编号来获取 GPIO 对象，然后将其设置为输入模式，并开启上拉电阻。`HX711::new(18, 27)` 表示创建一个 HX711 对象，其中 18 和 27 分别表示 HX711 的 SCK 和 DT 引脚对应 Raspberry Pi 的 GPIO 引脚编号。

运行代码后，可以通过红外遥控器发送信号，然后在终端中可以看到将红外信号转换为数字的输出。

4. 编译代码

使用以下命令来编译代码：

```
cargo build --target=armv7-unknown-linux-gnueabihf
```

编译完成后，可以将生成的二进制文件拷贝到 Raspberry Pi zero 2w 上，然后在终端中运行即可。

## refer.
> 关键参考

选择困难? [Best Linux Operating Systems for the Raspberry Pi](https://www.electromaker.io/blog/article/12-best-linux-operating-systems-for-the-raspberry-pi)

-	[树莓派及其他硬件平台国内外Linux镜像站全汇总-阿里云开发者社区](http://segmentfault.com/a/1190000000503041)
    -	[Alpine Linux 安装到 Raspberry Pi - openthings的个人空间 - OSCHINA - 中文开源技术交流社区](https://my.oschina.net/u/2306127/blog/1587585)
-	Raspbian 派 ... 官方的总是有问题...虽然文档多, 毕竟不是专业 OS 发行商...
		53+ [ラズベリーパイ - YouTube](https://www.youtube.com/playlist?list=PLolGQZF-26atBkbYgFDm7z1o_B_eFy6eK) 系列
    + 	[Raspberry Pi Zero 2 W を使ってみる！セットアップ〜デスクトップとして使えるのかチェック - YouTube](https://www.youtube.com/watch?v=wSvMPMdJjXI)
+ ArchLinux 流... ..
    + [Arch compared to other distributions - ArchWiki](https://wiki.archlinux.org/title/arch_compared_to_other_distributions#See_also)
    + 	以往真没用过, 值得学...关键看镜像:
        + [镜像源 - Arch Linux 中文维基](https://wiki.archlinuxcn.org/zh-hans/%E9%95%9C%E5%83%8F%E6%BA%90#%E5%8F%82%E8%A7%81)
        + 这里使用 `-n 6` 参数来实现只获取 6 个最快的镜像：
			    
```
    # rankmirrors -n 6 /etc/pacman.d/mirrorlist.backup > /etc/pacman.d/mirrorlist
```

- [Arch Linux 更换国内镜像源](https://www.zzxworld.com/posts/change-cn-mirror-for-arch-linux)
    - [Arch Linux - Mirror Overview](https://archlinux.org/mirrors/)
    - [Arch Linux - aliyun.com - Mirror Details](https://archlinux.org/mirrors/aliyun.com/)
    - [archlinuxcn镜像_archlinuxcn下载地址_archlinuxcn安装教程-阿里巴巴开源镜像站](https://developer.aliyun.com/mirror/archlinuxcn/)
    - 好吧还是大厂的错误少...
- [Pacman — Cloud Atlas 0.1 文档](https://cloud-atlas.readthedocs.io/zh_CN/latest/linux/arch_linux/pacman.html)
    - 关键工具, 平替 apt
        - [pacman使用代理服务器 — Cloud Atlas 0.1 文档](https://cloud-atlas.readthedocs.io/zh_CN/latest/linux/arch_linux/pacman_proxy.html)
			...
安装指南:

- 官方: [Raspberry Pi Zero 2 | Arch Linux ARM](https://archlinuxarm.org/platforms/armv8/broadcom/raspberry-pi-zero-2)
    - 全指令... fdisk 开始...
    - [在树莓派 Zero W 上安装 Arch Linux | 子飞的网络日志](https://chirsz.cc/blog/2020-09/install-archlinux-rp0w.html)
    - 关键笔记:
        - [Installing Arch Linux on Raspberry Pi with WiFi-only networking | Dollz'n'Codez](https://figuregeek.eu/linux/1732)
        - [Install Arch Linux ARM for Raspberry Pi Zero W on SD Card (with commands to configure WiFi before first boot).](https://gist.github.com/larsch/4a320f8ee5586fe6170af8051fcd9f85)
        - [Installing Arch Linux on Raspberry Pi with Immediate WiFi Access –](https://ladvien.com/installing-arch-linux-raspberry-pi-zero-w/)
        - [How To Install Arch Linux On A Raspberry Pi Zero W In Just A Few Minutes – Systran Box](https://www.systranbox.com/how-to-install-arch-linux-on-raspberry-pi-zero-w/)
        - [How to install Arch Linux ARM on a Raspberry Pi - YouTube](https://www.youtube.com/watch?v=TCfMr3vk6FU)
    - 相同过程...
        - 2022: [Installing Arch Linux On Raspberry Pi ProxMox - YouTube](https://www.youtube.com/watch?v=GvwD9pXYJi4)
            - 文字: [piprox-arch | Install notes for installing arch linux on pi proxmox](https://novaspirit.github.io/piprox-arch/)
        - ...
        - 2017: [Arch Linux for Raspberry Pi - YouTube](https://www.youtube.com/watch?v=28-oPIuz-G0)
            - 文字: [Installing Arch Linux on Raspberry Pi - Novaspirit](https://www.novaspirit.com/2017/04/25/installing-arch-linux-raspberry-pi/)
        - ...
        - 200+ [Raspberry Pi - YouTube](https://www.youtube.com/watch?v=qhe6KUw3D78&list=PL846hFPMqg3iTKbgQryS6UNXM4Nf3KVFw&pp=iAQB) 系列...
        - ...文字版: [Installing Arch Linux On Raspberry Pi ProxMox - Raspberry Pi Projects](https://raspberrypiprojects.com/installing-arch-linux-on-raspberry-pi-proxmox/)
        - 	...
        - ~~[How to Install Manjaro on Raspberry Pi? – RaspberryTips](https://raspberrytips.com/install-manjaro-raspberry-pi/)~~
            - 更加友好的界面...不过, 这个要先插好屏幕和键盘...
            - ...
- Manjaro ARM 版,专门适配有 #RaspberryPi
    - [The best 64 bit OS for Raspberry Pi: Manjaro KDE / XFCE (Full install guide / tutorial / review) - YouTube](https://www.youtube.com/watch?v=HwlM1Ws6KC8)
    - [How To Install Manjaro Arm On The Raspberry pi 1 2 3 Or Zero - YouTube](https://www.youtube.com/watch?v=u8vricJXVWQ)
        - ...只是省不掉人工配置过程?
- Ubuntu 派 ... 方便是方便...就太慢了...而且 IoT 相关文档还没 #RaspberryPi 全...
    - [Raspberry Pi OS vs Ubuntu](https://linuxhint.com/category/raspberry-pi/)
- BSD 派...否决, 驱动实在难
- ...



```
          _~∽--~_
      \/ /  ◶ ?  \ \/
        '_   ⌐   _'
        \ '--+--' |

...act by ferris-actor v0.2.4 (built on 23.0303.201916)
```]]></content:encoded></item></channel></rss>