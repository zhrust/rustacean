<?xml version="1.0" encoding="utf-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>be Rustaceans ~ 成锈纪</title><link>https://rs.101.so</link><description>~ 汇集 大妈/Zoom.Quiet 学习/实践/探索/... Rust 世界锈迹, 一起成为 Rustacean 吧...</description><generator>my_rss_generator</generator><item><title>two_kinds_assert_make_better_code.md</title><link>https://rs.101.so//tip/two_kinds_assert_make_better_code</link><pubDate>Mon, 03 Apr 2023 21:41:29 +0800</pubDate><content:encoded><![CDATA[# 两种'Assert'构建清晰代码
> tips...重要也不重要

原文: [Laurence Tratt: Rust's Two Kinds of 'Assert' Make for Better Code](https://tratt.net/laurie/blog/2023/rusts_two_kinds_of_assert_make_for_better_code.html)


## 快译

Daniel Lemire 最新近文章:
"[runtime asserts are not free](https://lemire.me/blog/2023/03/15/runtime-asserts-are-not-free/)" 研究了 C 语言中 assert 语句的运行时成本,
并上萌频繁执行的循环中再简单的 assert 也能导致大量的开销;

多年来, 自己也对断言的看法发生了变化,
从 "我不明白这点" 到 "谨慎使用丫们" 再到 "尽可能多的使用";
最后一个转变主要是因为 Rust 有两种 "断言" 语句
--- assert 和 debug_assert --- 这让我可以准确的表达两种不同类型的断言,
这在很大程度上令我摆脱了对性能的担忧;


### 背景
> Background

先来快速定义一下 "断言" 的含义:
这是一个编程语言的语句,
用以检查属性并在该属性不成立时引发崩溃(通常称为"失败断言");

例如, 如果我有一个 Python 程序,其中包含人们的年龄列表,
并计算最小年龄,我可能需要检查最年轻的人年龄是否为负:

```python
ages = [...]
youngest = min(ages)
assert(youngest >= 0)
```

如果 ages 包含负值---又或是 min 无法正常工作 --- assert 将失败,
并导致运行时异常:

```shell
Traceback (most recent call last):
  File "/tmp/t.py", line 3, in 
    assert(youngest >= 0)
AssertionError
```

换而言之, assert 大约相当于:
```python
ages = [...]
youngest = min(ages)
if not (youngest >= 0):
    raise AssertionError
```

在实践中, 断言主要用来检查有关程序状态的假设 --- 在这种情况中,
不应该将负数输入系统;

我想要检查这个特定假设有两个主要原因;
首先,可能已经编写了后续代码, 而这些代码只能在 youngest 值非负的情况中工作;
我想防止在违反该属性时执行后续代码(译按:因为, 此时, 必定失败);
其次, assert 记录并检验属性;
换句话说, 我可以写一条注解:

```python
ages = [...]
youngest = min(ages)
# youngest must be non-negative or bad things will happen below
...
```

该注释准确的描述了程序的假设,
但是,如果假设不正确 --- 也许是因为程序的另一部分使用 -1 来表示"未知大小"
--- 那么"坏事"就会发生;

如果幸运的话, 效果会相对良性, 甚至可能是不可见的;
但是, 如果运气不好, 就会触发真正糟糕的事儿,
从奇怪的输出到安全漏洞;

调试此类不正确的假设很困难,因为,假设违规的影响通常只有在违规发生很久之后,
才会被注意到;
对于一些可怜的程序员来说, 花一天或更长时间寻找一个问题,
却发现只是由违反简单假设引发的,这种事儿并不罕见;

相比之下, assert 会导致我的程序以可预测的方式崩溃,
并有清晰的报告,并尽早崩溃;
通常,修复断言失败的原因往往相对简单;

(译按: 毕竟断言已经标定出了问题范畴)

### 为什么断言的使用频率比人们想象的要少
> Why asserts are used less often than one might think

正如前述, 断言看起来像是个明显的胜利 --- 但是, 大多数程序使用的断言比人们希望的要少得多;

最明显的原因是, 程序员通常没有意识到他们嵌入到程序中的假设,
或者没有考虑他们假设的后果;

对于初级程序员来说尤其如此,他们还没能从连续的调试中建立创伤反应,
也就是并没想到使用断言;

我在多年编程之后, 才意识到我没有考虑并检查对程序属性的假设,
浪费了太多时间;

有时, 王清楚如何维护自己关心的属性也非常困难;
在像 C 这样的语言中尤其如此,
因为, 没有内置的帮助来表达诸如"列表中的任何元素都不能为负"之类的属性;
assert 需要越长越困难---尤其是当需要一个辅助函数时---本身被写下来的可能性就越小;

不可避免的, 一些断言也是完全错误的,
要么表达不正确的属性, 要么错误的表达正确的属性;
我想大多数人都在经历这样的错误;

然而, 很多人没有意识到的是, 如果断言有副作用,
就会改变程序的行为;
我不止一次通过将 `l[i++]` 等代码复制并粘贴到断言中来搬起石头砸自己的脚,
导致程序根据断言是否编译而以不同的方式执行;

我认为这是我不可避免的愚蠢,
而不是断言概念的缺陷, 
不过, 我听说至少有一个组织因为这个问题而禁止(或是倡导禁止)断言;

### 性能问题
> Performance issues

Daniel 指出了一个避免断言的非常不同的原因:
如果在"错误"的地方使用断言时, 可能会导致严重的性能问题;
断言引入了一个必须在运行时执行的分支(即"if")

> 分支预测因子是惊人的，但有时人们谈论它们，就好像它们使分支免费一样。唉，他们没那么神奇！

断言的存在也可能导致编译器错过编译时优化的机会;

> 反之亦然：断言有时可以帮助编译器更好地优化代码。虽然我没有确凿的数据来表明哪种结果更频繁地发生，但我倾向于认为负面结果更常见。

编程社区普遍担心断言的性能成本,
即便我们没有人知道如何影响给定的程序而不实际测量;

为了避免性能问题, 大多数软件都是在"调试"(有时称为"测试")
或是"发布"模式下编译的: 在调试模式中, 断言在运行时编译和检查;
但是,在发布模式中, 断言不会编译,因此,不会在运行时进行检查;

然而,在 C 这种语言中,
并没有区分"调试"和"发布"模式的概念,
但是, 很多人认为"发布"东西方只意味着追加一个标志 -DNDEBUG,
这将导致 assert 成为无操作;
Rust 的标准构建系统 Cargo 默认是调试模式,
--release 则执行发布构建;


### 两种断言
> Two kinds of asserts


虽然,在发布东西方中不编译(因此不检查)学术交流可以消除性能问题,
但是,也削弱了我们对程序正确性的保证---仅仅因为测试套件不违反假设,
并不意味着真实用户不会快这种方式使用程序;


因此, 这些天我认为断言分为两类:

- 检查问题域假设
- 检查内部假设

这种区别可能看起来是人为的, 甚至可能根本不存在,
所以, 让我举例说明我的意思;

第一类包含关于我的程序试图帮助解决"现实世界"问题假设;
例如, 如果我正在编写仓库库存系统,则, 程序的某些部分可能会假定诸如
"物料的条形码从不为空"之类的属性;

第二类包含关于我构建程序方式的假设;
例如,我可能编写了一个函数,如果我假设输入整体大于 1,
该函数的运行速度会快很多;
很可能,在我编写该函数时,
我不会以违反该属性的方式调用:
但是, 后来的程序(包含我自己!)很可能会忘记或是不注意到该属性;

因此, 学术交流对未来的程序员特别有用,
尤其是当他们重构代码时,
让他们更加有信心不会以微妙的方式破坏程序;

但是,我对在测试期间发现违反我在第一类假设的行为信心要低得多;

我有不同的信心水平应该不足为奇 --- 毕竟,
我被录用的是因为我能编程, 而不是因为我对仓库库存系统或是条形码了解很多!

但是,由于"正常测试"意味着"调试模式",
而"用户正在运行程序"意味着"发布模式",
这意味着我最不自信的假设在最需要的时候没有被执行;

### 两种断言语句
> Two kinds of assert statement

我刚刚表达的问题最终发生是因为像 C 这样的语言迫使我们使用
单个 assert 语句对这两种假设进行编码:
[always checked in both debug and release builds, and cannot be disabled.](https://doc.rust-lang.org/stable/std/macro.assert.html)


我一直认为这是不可避免的, 但是, 
当我几年前迁移到 Rust 时,我慢慢意识到现在可以使用两种断言语句;

debug_assert 很像 C 中的 assert,
从某种意义上说, 表达一假设仅在调试模式下进行检查;
相比 assert 在调试和发布版本中始终处于选择状态, 并且无法禁用;


这似乎是一个很小的差异,
但是,对于我来说, 这完全释放了断言的力量;
如果你看一下我现在写的很多代码,
就会看到 debug_assert 的奔放使用,
经常检查相当小的假设, 包括那些我认为可能违反的假设;
我甚至从未想过, 更加不用说担心  debug_assert 性能影响了;
但是, 偶尔你会发现一个 assert, 有时甚至在相当频繁执行的代码中
--- 这些是我检验特别重要的假设的地方,
或是特别低置信度的假设;
每次我写 assert 时, 都会考虑可能的性能影响,
以及是否有办法增加我对假设的信心,
以至于我可以将其降级为 debug_assert ;
同样, 在调试时, 我经常非常仔细的检查 assert 语句,
因为, 它们表明我对特定假设的信心比较低:
我更可能必须重新考虑 assert 而不是  debug_assert;


当然, 没有理由不能用 C 或是任何其它语言编写自己的 assert 和  debug_assert 等效项,
但是,将其内置到语言(或是标准库)中,
其中它们的不同动机被清楚的记录并被广泛理解,
这使得自由使用断言变得更加容易;


我希望 Rust 以外的语言将继续的断言上做出这种上车
--- 尽管我更喜欢比 "debug_assert" 更短的名字!


(译按: dassert 就可以;-)





```
          _~`|`~_
      \) /  ← ◷  \ \/
        '_   V   _'
        \ '--∽--' )

...act by ferris-actor v0.2.4 (built on 23.0303.201916)
```]]></content:encoded></item><item><title>README.md</title><link>https://rs.101.so//101/README</link><pubDate>Mon, 03 Apr 2023 12:00:38 +0800</pubDate><content:encoded><![CDATA[# 学习
> learnning ...


## background
> 可能背景

和其它语言不同, Rust 有太多公开的秘密,如果不能快速先习惯一批,
很难写出可以运行的软件来...

## goal
> 必要目标

最常用的那 20% Rust 常识...以便解决 80% 应用场景

## trace
> 具体推进

- [ ] 基本概念
    - [x] 所有权/借用/作用域
    - [x] Option
    - [x] Box
    - [ ] ...
- [ ] 核心数据结构,及其常用操作
- [ ] 推荐工程结构 ~> [Clear explanation of Rust’s module system](https://www.sheshbabu.com/posts/rust-module-system/)
    - [ ] crate 以及内部模块管理
    - [x] logging
        - tracing = "0.1"
        - clia-tracing-config = "0.2"
- [ ] 实用开发/调试流程
    - [x] MVP/ CLI 工程
    - [ ] MVP/ web 工程
    - [ ] MVP/ 微服务
    - [ ] MVP/ 系统服务
    - [ ] ...
- [ ] 实效 TDD 流程
- [ ] 底层调试技巧: gdb ...



## refer.
> 各种参考


必刷练习:

- [GitHub - rust-lang/rustlings: Small exercises to get you used to reading and writing Rust code!](https://github.com/rust-lang/rustlings) ~ 官方大佬亲自编撰的...形式上也充分利用了 Cargo 工具链, 非常的锈...
- [Rust Quiz #1](https://dtolnay.github.io/rust-quiz/1)
- [Rust on Exercism](https://exercism.org/tracks/rust)
- ...


### 自锈路径

- [Resources - Rust Edu](https://rust-edu.org/resources/)
    - [I wanna be a crab. : rust](https://www.reddit.com/r/rust/comments/11dofu8/i_wanna_be_a_crab/)
    - [Learn Rust\!](https://gist.github.com/noxasaxon/7bf5ebf930e281529161e51cd221cf8a)
    - [Learn Rust Programming Course – Interactive Rust Language Tutorial on Replit](https://www.freecodecamp.org/news/author/shaun/)
    - [Learn Rust in a Month of Lunches](https://www.manning.com/books/learn-rust-in-a-month-of-lunches)
    - ...
- [How not to learn Rust](https://dystroy.org/blog/how-not-to-learn-rust/ "How not to learn Rust") .. 初学者常犯错误...
- [Michael Yuan - 袁钧涛](https://www.freecodecamp.org/news/edge-cloud-microservices-with-wasmedge-and-rust/) ~ 天体物理学博士, 早期 JBoss 成员, WEB3 专家...
    - [The Top 8 Things I Learned From 4000 Rust Developers](https://www.freecodecamp.org/news/author/michael/)
    - [How to Learn Rust Without Installing Any Software](https://www.freecodecamp.org/news/learn-rust-with-github-actions/) ~ 白嫖专家...
        - [GitHub Codespaces – How to Code Right in Your Browser with Your Own Cloud Dev Environment](https://www.freecodecamp.org/news/learn-programming-in-your-browser-the-right-way/)
    - [How to Create a Serverless Meme-as-a-Service](https://www.freecodecamp.org/news/create-a-serverless-meme-as-a-service/)
    - [Edge Cloud Microservices – How to Build High Performance & Secure Apps with WasmEdge and Rust](https://www.freecodecamp.org/news/edge-cloud-microservices-with-wasmedge-and-rust/)
    - WASM/
        - [How to use Rust + WebAssembly to Perform Serverless Machine Learning and Data Visualization in the Cloud](https://www.freecodecamp.org/news/rust-webassembly-serverless-tencent-cloud/)
        - [How to Build a Personal Dev Server on a $5 Raspberry Pi](https://www.freecodecamp.org/news/build-a-personal-dev-server-on-a-5-dollar-raspberry-pi/)
- ...

### rustCC
> 中文社区:

- [程序设计训练（Rust）](https://lab.cs.tsinghua.edu.cn/rust/) ~2021-2022 年夏季学期起清华大学计算机系开设的《程序设计训练（Rust）》
- [Rust 语言文档 · Rust 程序设计语言](https://prev.rust-lang.org/zh-CN/documentation.html)
    - [Rust 中文文档 | Rust 文档网](https://rustwiki.org/docs/)
    - [Rust 文档翻译指引 | Rust 文档网](https://rustwiki.org/wiki/translate/rust-translation-guide/#tong-yi-fan-yi-zhu-yu-he-gu-ding-yong-yu)
    - [常见问题解答 · Rust 程序设计语言](https://prev.rust-lang.org/zh-CN/faq.html#lifetimes)
    - ...
- [张汉东|半小时弄懂-Rust基本语法及语言特性_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV15U4y177oh/)
    - [左耳朵耗子|以 Rust 为例，带你搞懂编程语言本质_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1cA411877u/)
    - ...
- ...


### Youtube
> 真的是什么都有

- 各种劝解:
    - [Rust Linz, June 2021 - Tim McNamara - How to learn Rust - YouTube](https://www.youtube.com/watch?v=sDtQaO5_SOw)
- 110+[Rust 编程语言入门教程 \[2021\] \- YouTube](https://www.youtube.com/playlist?list=PL3azK8C0kje1DUJbaOqce19j3R_-tIc4_)
    - 94+ [Rust - YouTube](https://www.youtube.com/playlist?list=PLVhhUNGAUIQScqB26DdUq4n1Y2n3auM7X)
        - 专题:[rusqlite - YouTube](https://www.youtube.com/watch?v=xhU8KDzL0vA&list=PLVhhUNGAUIQRR7JheZsDaxF_Cd5Pf5slw)
        - [SQL Cheat Sheet | Crazcalm](http://ogcrazcalm.blogspot.com/2015/11/sql-cheat-sheet.html)
        - [SQLite - Rust Cookbook](https://rust-lang-nursery.github.io/rust-cookbook/database/sqlite.html#insert-and-select-data)
        - [rusqlite - crates.io: Rust Package Registry](https://crates.io/crates/rusqlite)
        - [File in std::fs - Rust](https://doc.rust-lang.org/std/fs/struct.File.html#examples)
    - 42+[RUST PROGRAMMING TUTORIALS \- YouTube](https://www.youtube.com/playlist?list=PLVvjrrRCBy2JSHf9tGxGKJ-bYAN_uDCUL)
    - 44+[Intro to Rust \- YouTube](https://www.youtube.com/playlist?list=PLJbE2Yu2zumDF6BX6_RdPisRVHgzV02NW)
    - 14+[Rust For Starters \- YouTube](https://www.youtube.com/playlist?list=PLKkEWK6xRmes17LQUEA5bNjYISuCEOTXx)
- 44+[The Rust Lang Book \- YouTube](https://www.youtube.com/playlist?list=PLai5B987bZ9CoVR-QEIN9foz4QCJ0H2Y8)
- 25+[Rust Projects \- YouTube](https://www.youtube.com/playlist?list=PLJbE2Yu2zumDD5vy2BuSHvFZU0a6RDmgb)
    - 24+[50 RUST Projects \- YouTube](https://www.youtube.com/playlist?list=PL5dTjWUk_cPYuhHm9_QImW7_u4lr5d6zO)
- [Jon Gjengset - YouTube](https://www.youtube.com/@jonhoo)
    - 14+ [Crust of Rust - YouTube](https://www.youtube.com/playlist?list=PLqbS7AVVErFiWDOAVrPt7aYmnuuOLYvOa)
    - 14+ [Rust live-coding - YouTube](https://www.youtube.com/playlist?list=PLqbS7AVVErFgY2faCIYjJZv_RluGkTlKt)
- [Rust Talks \- YouTube](https://www.youtube.com/playlist?list=PLZaoyhMXgBzoM9bfb5pyUOT3zjnaDdSEP)
    - 各种畅想...
    - [Contributing to Rustc \- YouTube](https://www.youtube.com/playlist?list=PLnhCUtqrIE-zgfmf6hn6fLwhfR_hDSG9T) ~ 牛人直播如何为 Rust 编译器贡献特性...
- [Rust - YouTube](https://www.youtube.com/watch?v=_jMSrMex6R0&list=PLFjq8z-aGyQ6t_LGp7wqHsHTYO-pDDx84)
    - 各种前景分析
    - [WebAssembly - YouTube](https://www.youtube.com/watch?v=qjwWF6K-7uE&list=PLFjq8z-aGyQ78CQu1G3C5CT9ieiNpsnbJ) ~ 各种实现应用
- [Idiomatic Rust \- YouTube](https://www.youtube.com/playlist?list=PLai5B987bZ9A5MO1oY8uihDWFC5DsdJZq)
- ...


### free Books
> 这个世界上免费好资源太多了...

[free-programming-books/free-programming-books-langs.md at main · EbookFoundation/free-programming-books](https://github.com/EbookFoundation/free-programming-books/blob/main/books/free-programming-books-langs.md#rust)

- [Rust 语言文档 · Rust 程序设计语言](https://prev.rust-lang.org/zh-CN/documentation.html)
- [Rust 中文文档 | Rust 文档网](https://github.com/rust-lang-cn/rustdoc-cn/fork)
- [Rust 语言之旅 - Let's go on an adventure!](https://tourofrust.com/11_zh-cn.html)
- [Y分钟速成X ~ 其中 X=Rust](https://learnxinyminutes.com/docs/zh-cn/rust-cn/)
    - [Rust 备忘清单 & rust cheatsheet & Quick Reference](https://wangchujiang.com/rust-cn-document-for-docker/quick-reference/docs/rust.html)
- [sger/RustBooks: List of Rust books](https://github.com/sger/RustBooks#advanced-books)
    - [ctjhoa/rust-learning: A bunch of links to blog posts, articles, videos, etc for learning Rust](http://llogiq.github.io/2015/07/15/profiling.html)
    - [Introduction - Learning Rust With Entirely Too Many Linked Lists](https://rust-unofficial.github.io/too-many-lists/first.html)
    - ...
- ...

### 面试向...
> 也就是 Leetcode 之类的东西, 要死记的...


- 44+ [Leetcode - YouTube](https://www.youtube.com/watch?v=L93kxEn2sEA&list=PLib6-zlkjfXnl7Qyy9QzOt5BAphdAwmHm&pp=iAQB)
- 8+ [Rust Leetcode Solutions - YouTube](https://www.youtube.com/watch?v=dK5jUHRbyCA&list=PLvePk7bSSZhe5C8NNaxDhABkjg5F70wdE&pp=iAQB)
- ...



## logging
> 版本记要

- ..
- 221214 ZQ init.


```
            _~`|-~_
        \) /  O =  \ ()
          '_   ⏡   _'
          | '-----' )

...act by ferris-actor v0.2.4 (built on 23.0303.201916)
```]]></content:encoded></item><item><title>chat_dyn101.md</title><link>https://rs.101.so//101/chat_dyn101</link><pubDate>Sun, 02 Apr 2023 13:06:44 +0800</pubDate><content:encoded><![CDATA[# dyn:动/静态多态初步
> 学伴ChatGPT, chatting for debugging ...

## background
> Rust 中文社区中的讨论...

![这种用if let就会报错，必须分开写吗](https://ipic.zoomquiet.top/2023-02-28-%E9%A3%9E%E4%B9%A620230228-150444.jpg)


## goal

合理完成调试...

## trace

有同学建议:
```rust
if let Ok(exists) = conn.exists::<bool, _>(key).await {
    unimplemented!()
}
```

于是开始探问:

> Q:

if let Ok(exists) = conn.exists::<bool, _>(key).await {
}
这句代码什么意思?

> A:

这句代码是Rust语言的代码，用于在Redis数据库中检查指定键是否存在，并异步地返回一个结果。

具体来说，这段代码首先调用一个Redis连接对象（conn）上的exists方法来检查给定的key是否存在。该方法返回一个Result<bool, _>类型的结果，其中Ok表示检查操作成功，exists表示指定的key存在，否则返回一个错误对象（_表示任意的错误类型）。

然后，这段代码使用if let语法，将返回的结果绑定到一个名为exists的变量上。如果exists是Ok类型，则意味着检查操作成功，并且可以继续执行if代码块中的逻辑来处理key存在的情况。反之，如果exists是Err类型，则意味着检查操作失败，并且需要在else代码块中处理错误情况。

> Q:

一般在 else 中如如何处理错误?
如果 exists 是 Ok , 这时 那个 key 是如何进入 if 代码块进行处理的?

> A:

在 else 中，一般会处理检查操作失败的情况，例如记录日志、返回错误信息等。具体如何处理错误，取决于代码的设计和业务需求。以下是一个简单的例子，展示了在 else 中如何记录错误信息：

```rust
if let Ok(exists) = conn.exists::<bool, _>(key).await {
    if exists {
        // 如果 key 存在，则执行相应的逻辑
    } else {
        // 如果 key 不存在，则执行相应的逻辑
    }
} else {
    // 如果检查操作失败，则记录错误信息并返回错误
    eprintln!("Failed to check if key exists: {:?}", key);
    return Err(MyError::RedisError);
}
```

> Q:

在上面的代码中，如果检查操作成功，则根据 exists 的值分别执行相应的逻辑。如果检查操作失败，则使用 else 代码块来记录错误信息，并返回一个自定义的错误类型（MyError::RedisError）。

如果 exists 是 Ok，则表示检查操作成功，exists 变量将包含一个布尔值，指示给定的 key 是否存在。在这种情况下，程序将进入 if 代码块，根据 exists 的值执行相应的逻辑。例如，如果 exists 为 true，则表示 key 存在，程序将执行相应的逻辑来处理 key 存在的情况。反之，如果 exists 为 false，则表示 key 不存在，程序将执行相应的逻辑来处理 key 不存在的情况。

> A:

是的，你是对的。在你提供的代码片段中，key 是在之前定义的。在这种情况下，我们可以假设在这段代码之前，已经定义了一个名为 key 的变量，用于指定要检查的 Redis 键名。

例如，以下是一个使用 Redis 进行键值存储的简单示例，其中使用了类似于你提供的代码片段：

```rust
use redis::AsyncCommands;

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    let client = redis::Client::open("redis://127.0.0.1/").unwrap();
    let mut conn = client.get_async_connection().await?;

    // 定义要检查的 Redis 键名
    let key = "my_key";

    // 检查指定的键是否存在
    if let Ok(exists) = conn.exists::<bool, _>(key).await {
        if exists {
            // 如果 key 存在，则执行相应的逻辑
            let value: String = conn.get(key).await?;
            println!("{}: {}", key, value);
        } else {
            // 如果 key 不存在，则执行相应的逻辑
            conn.set(key, "Hello, Redis!").await?;
            println!("Set {} successfully", key);
        }
    } else {
        // 如果检查操作失败，则记录错误信息并返回错误
        eprintln!("Failed to check if key exists: {:?}", key);
        return Err("RedisError".into());
    }

    Ok(())
}

```

在这个示例中，我们首先定义了一个名为 key 的变量，用于指定要检查的 Redis 键名。然后，我们使用 conn.exists 方法检查指定的键是否存在。如果检查操作成功，则根据检查结果的值（即变量 exists）执行相应的逻辑。如果检查操作失败，则记录错误信息并返回错误。在这个例子中，我们使用 eprintln 来记录错误信息，并使用 return Err(...) 返回一个字符串类型的错误信息。最后，我们使用 Ok(()) 返回一个表示成功的结果。

> Q:

这个函数的返回值 Result<(), Box<dyn std::error::Error>>
是什么含义, 应该如何理解?

> A:

这个函数的返回值是一个 Result 类型，其中 () 表示一个空元组（也称为 unit type）。在 Rust 中，() 用于表示没有值的情况，类似于其他语言中的 void 类型。在这个函数的上下文中，() 表示函数没有返回任何有用的值，只是执行了一些操作。因此，我们可以将这个函数的返回值解读为“表示函数执行是否成功的结果，如果成功则不返回任何值，否则返回一个实现了 std::error::Error trait 的错误类型”。

Box<dyn std::error::Error> 是一个 trait 对象，它表示一个可以作为错误类型的任何类型，只要该类型实现了 std::error::Error trait。在 Rust 中，std::error::Error trait 是一个通用的错误处理 trait，它定义了一些方法和属性，用于处理和显示错误信息。实现 std::error::Error trait 的类型可以是任何具体的类型，例如字符串、自定义结构体、枚举等等。但是，为了方便和通用性，我们通常会将实现了 std::error::Error trait 的类型封装在一个 Box 中，以实现动态分配和回收内存的效果。

因此，将 Box<dyn std::error::Error> 作为函数的返回值，表示该函数可能会返回一个实现了 std::error::Error trait 的错误类型。当函数执行成功时，它将返回一个 Ok(()) 值，表示函数执行成功且没有返回任何值。当函数执行失败时，它将返回一个 Err 值，其中包含一个实现了 std::error::Error trait 的错误类型，该错误类型可以提供有关错误的更多信息，例如错误消息、错误码、堆栈跟踪等等。在实际使用中，我们通常会根据错误类型来处理错误，例如记录错误日志、返回错误码、重试操作等等。

> Q:

这里的 dyn 是什么语法?为什么要包在一个 Box 中?

> A:

dyn 是 Rust 语言中的一个关键字，用于表示动态派发的类型。在 Rust 中，存在两种类型的多态：静态多态和动态多态。静态多态是通过泛型实现的，可以在编译时确定具体的类型，而动态多态是通过 trait 对象实现的，只有在运行时才能确定具体的类型。

在 Rust 中，Box 是一个智能指针类型，用于在堆上分配和管理动态分配的值。由于 trait 对象的大小和类型在编译时是不确定的，因此不能直接将 trait 对象放在栈上或者嵌入到其他类型中。为了方便和安全地使用 trait 对象，我们通常会将其封装在一个 Box 中，以实现动态分配和回收内存的效果。

因此，在 Result<(), Box<dyn std::error::Error>> 这个类型中，Box<dyn std::error::Error> 表示一个实现了 std::error::Error trait 的错误类型，它可能是任何具体的类型，例如字符串、自定义结构体、枚举等等。由于该类型是动态分配的，因此需要使用 Box 来管理其内存。最后，Result<(), Box<dyn std::error::Error>> 表示一个成功时不返回任何值，失败时返回一个实现了 std::error::Error trait 的错误类型的结果类型。

> Q:

对应 dyn 的静态多态是什么, 能举个例子嘛?

> A:

对应于 dyn 的静态多态是 Rust 中的泛型，用于在编译时确定具体的类型。在 Rust 中，泛型可以通过类型参数来表示，例如：

```rust
fn add<T>(x: T, y: T) -> T
where
    T: std::ops::Add<Output = T> + Copy,
{
    x + y
}

let x = 1;
let y = 2;
let z = add(x, y);

```

在上面的例子中，add 函数使用了泛型类型 T，它表示任意类型。函数签名中的 where 关键字表示泛型类型 T 需要满足的一些约束，例如实现了 std::ops::Add trait，并且该 trait 的 Output 关联类型为 T，同时还需要实现 Copy trait。这些约束保证了类型 T 支持加法操作，并且可以进行值的拷贝操作。最后，add 函数返回类型为 T，表示函数的返回值类型和参数类型相同。

在使用泛型的时候，可以在函数调用时指定具体的类型，例如：

```rust
let x = 1;
let y = 2;
let z = add::<i32>(x, y);
```

在上面的例子中，add::<i32> 表示调用 add 函数，并将类型参数 T 指定为 i32 类型。由于 i32 类型实现了 std::ops::Add trait 和 Copy trait，因此满足函数签名中的约束，可以成功调用函数并返回值。

总之，静态多态和动态多态是 Rust 中的两种多态方式，它们分别用于在编译时和运行时确定具体的类型。在 Rust 中，泛型用于静态多态，通过类型参数在编译时确定具体的类型，而 trait 对象用于动态多态，只有在运行时才能确定具体的类型。

> A:

也就是说静态多态用 T 来声明, 动态多态用 dyn 声明? 上述那个 add 的示例用 dyn 来定义应该如何写?

> Q:

不完全正确，静态多态和动态多态都可以使用泛型来实现，只不过它们使用方式和目的略有不同。具体来说，泛型主要用于静态多态，可以在编译时确定具体的类型，而 trait 对象主要用于动态多态，可以在运行时确定具体的类型。因此，泛型通常用于函数、结构体、枚举等静态类型的定义中，而 trait 对象通常用于函数参数、返回值、实现动态分发等需要动态类型的场景中。

对于你的问题，如果要将上面的 add 函数改写成使用 trait 对象实现的动态多态，可以将参数类型从泛型 T 改为 trait 对象 dyn std::ops::Add<Output = T>，如下所示：

```rust
fn add<T>(x: T, y: T) -> T
where
    T: Copy,
    dyn std::ops::Add<Output = T> + 'static,
{
    x + y
}

let x = 1;
let y = 2;
let z = add(x, y);

```

在上面的例子中，add 函数使用了 trait 对象 dyn std::ops::Add<Output = T>，它表示实现了 std::ops::Add trait，并且该 trait 的 Output 关联类型为 T 的任意类型。由于 trait 对象的大小和类型在编译时是不确定的，因此需要使用 dyn 关键字来表示动态类型。同时，为了使 trait 对象能够在函数内部被存储和使用，还需要使用 'static lifetime 来保证 trait 对象的生命周期至少和整个程序的生命周期一样长。

值得注意的是，在使用 trait 对象时，需要将 trait 对象的实现限制在编译时已知的范围内。例如，在上面的例子中，由于 add 函数需要使用 x + y 表达式，因此要求 trait 对象 dyn std::ops::Add<Output = T> 的实现类型必须实现了 Copy trait，以便进行值的拷贝操作。这样一来，即使 trait 对象的实现类型是在运行时动态确定的，也能够保证它们满足 Copy trait 的要求，从而避免出现运行时错误。



> A:

那么 trait 对象也能完成静态多态的任务嘛? 举行说明?

> Q:

Trait 对象主要用于实现动态多态，因为它允许在运行时根据具体类型来调用不同的方法实现。而泛型主要用于实现静态多态，因为它允许在编译时确定具体类型，并且可以根据具体类型来进行代码优化等操作。

虽然 trait 对象不能像泛型一样进行编译时优化，但是在某些情况下也可以完成一些静态多态的任务。例如，假设我们有一个函数 print，它可以打印不同类型的值。如果使用泛型来实现，可以定义如下：

```rust
fn print<T: std::fmt::Display>(value: T) {
    println!("{}", value);
}

```

在这个例子中，我们使用了泛型来实现静态多态，函数的参数类型 T 在编译时就已经确定，因此可以在函数内部使用 std::fmt::Display trait 来打印不同类型的值。

但是，如果我们希望在运行时动态确定参数类型，就可以使用 trait 对象来实现。例如：

```rust
fn print(value: &dyn std::fmt::Display) {
    println!("{}", value);
}

let s = "Hello, world!";
let n = 42;
print(&s);
print(&n);

```

在这个例子中，我们使用了 trait 对象 &dyn std::fmt::Display 来实现动态多态，函数的参数类型在运行时才确定。在函数内部，我们可以使用 std::fmt::Display trait 来打印不同类型的值，由于 trait 对象的大小和类型在编译时是不确定的，因此不能像泛型那样进行编译时优化，但是可以在运行时根据具体类型进行动态分发，从而完成类似于静态多态的任务。

总之，尽管 trait 对象和泛型都可以用于多态编程，但它们各自适用于不同的场景和任务，需要根据实际情况选择合适的方式。泛型适用于在编译时确定类型的场景，而 trait 对象适用于在运行时确定类型的场景，同时，两者也可以结合使用来实现更加灵活和高效的编程方式。

> A:

<T: std::fmt::Display> 是什么语法? 起什么作用? 如何理解? 有其它表述形式嘛?

> Q:

<T: std::fmt::Display> 是一个泛型参数声明，用于在函数中定义一个泛型类型 T，该类型必须实现 std::fmt::Display trait。它的作用是让函数能够处理不同类型的参数，同时要求这些参数必须实现 Display trait。

这个语法可以理解为：“定义一个名为 T 的泛型类型，它必须实现 std::fmt::Display trait。”

另外，还有一种等效的语法，可以使用 where 关键字来声明泛型类型的约束条件，例如：

```rust
fn print<T>(value: T)
where
    T: std::fmt::Display,
{
    println!("{}", value);
}
```

这个语法的意思和前面的语法是等价的，它表示：“定义一个名为 T 的泛型类型，在函数体内部使用它，并要求它必须实现 std::fmt::Display trait。”

在 Rust 中，这两种语法是等价的，选择哪种语法主要取决于个人的编码习惯和喜好。通常来说，第一种语法适用于简单的泛型函数，而第二种语法适用于更复杂的泛型函数，因为它可以将类型约束条件单独列出来，使得函数的声明更加清晰和易读。

> A:

明白了, 举例说明如何兼容没有实现 std::fmt::Display trait 的对象传入后, 如何安全响应?

> A:

如果我们需要在函数中处理可能没有实现 std::fmt::Display trait 的类型，一种常见的做法是使用 Rust 提供的 Option 或 Result 类型来表示这种情况，并在函数中进行处理。

例如，我们可以将 print 函数改为返回一个 Result<(), Box<dyn std::error::Error>> 类型的结果，这样就可以在函数中处理可能出现的错误：

```rust

fn print<T: std::fmt::Display>(value: T) -> Result<(), Box<dyn std::error::Error>> {
    println!("{}", value);
    Ok(())
}

```

在这个版本的 print 函数中，我们使用 Result 类型来表示函数执行的结果，并使用 Box<dyn std::error::Error> 类型来表示可能出现的错误。如果传入的参数没有实现 std::fmt::Display trait，则在执行 println! 时会抛出一个错误，这个错误会被捕获并返回一个 Err 值。

调用方可以根据 Result 类型的返回值来判断函数是否执行成功，如果返回了 Err 值，则说明函数执行过程中出现了错误。调用方可以选择忽略这个错误，或者将错误信息打印出来，以便于调试和排查问题。例如：

```rust
fn main() -> Result<(), Box<dyn std::error::Error>> {
    let value = 42;
    print(value)?;
    Ok(())
}

```

在这个例子中，我们将一个整数类型的值 42 传给了 print 函数，由于整数类型没有实现 std::fmt::Display trait，因此在函数中会抛出一个错误，这个错误会被捕获并返回一个 Err 值。在 main 函数中，我们使用 ? 操作符来处理这个错误，这样如果 print 函数执行失败，main 函数也会返回一个 Err 值，程序会打印出错误信息。


> PS:进一步的, 综合之前介绍,可以用 where 进行外部声明,简化函数声明:

```rust
fn print<T>(value: T) -> Result<(), Box<dyn std::error::Error>>
where
    T: std::fmt::Display,
{
    println!("{}", value);
    Ok(())
}
```


> A:

我是说 Result<(), Box<dyn std::error::Error>> 这里也太长了, 有对应简洁形式嘛?

> Q:

在 Rust 中，可以使用 type 关键字来给某种类型起一个别名，从而在代码中使用这个别名来代替原始的类型。这样可以使得代码更加易读和易于维护。

对于 Result<(), Box<dyn std::error::Error>> 这样的类型，我们可以使用 type 关键字来为它起一个别名，例如：

```rust
type MyResult = Result<(), Box<dyn std::error::Error>>;

```

这个代码片段定义了一个名为 MyResult 的别名，它表示的类型和 Result<(), Box<dyn std::error::Error>> 是一样的。有了这个别名，我们可以在代码中使用 MyResult 来代替 Result<(), Box<dyn std::error::Error>>，从而使得代码更加易读。

例如，我们可以使用这个别名来定义 print 函数的返回类型：

```rust
fn print<T: std::fmt::Display>(value: T) -> MyResult {
    println!("{}", value);
    Ok(())
}

```

这个版本的 print 函数和之前的版本相比，唯一的区别就是使用了 MyResult 这个别名来代替了 Result<(), Box<dyn std::error::Error>>，这样可以使得函数声明更加简洁易读。

调用这个版本的 print 函数和之前的版本是一样的，例如：

```rust
fn main() -> MyResult {
    let value = 42;
    print(value)?;
    Ok(())
}

```

## refer.
> 其实官方的文档吃透, 基本可以平趟 80% 的日常开发了...

[Generic Types, Traits, and Lifetimes - The Rust Programming Language](https://doc.rust-lang.org/book/ch10-00-generics.html)

- [Generic Data Types - The Rust Programming Language](https://doc.rust-lang.org/book/ch10-01-syntax.html)
- [Traits: Defining Shared Behavior - The Rust Programming Language](https://doc.rust-lang.org/book/ch10-02-traits.html#defining-a-trait)

...这些链接对应的是 Rust 官方文档中的《Rust 程序设计语言》一书中的相关章节，包含了静态多态和动态多态的基本概念、使用方法和示例代码等内容，非常适合初学者阅读学习。除此之外，还可以参考 Rust 官方文档中的其他部分，如《Rust 标准库 API 参考》和《Rust 风格指南》等，来深入理解 Rust 中的泛型和 trait 等概念。

> Prompt 工程师炼金密术课程:

- [👋 Welcome | Learning Prompt](https://learningprompt.wiki/docs/%F0%9F%91%8B%20Welcome)



```
       _~~|-~_
   () /  ◕ -  \ (/
     '_   ⎵   _'
     | '-----' |

...act by ferris-actor v0.2.4 (built on 23.0303.201916)
```


]]></content:encoded></item><item><title>rustlings_94.md</title><link>https://rs.101.so//101/rustlings_94</link><pubDate>Thu, 30 Mar 2023 11:59:15 +0800</pubDate><content:encoded><![CDATA[# rustlings:94

## background
> conversions/as_ref_mut.rs

AsRef and AsMut allow for cheap reference-to-reference conversions.

Read more about them at https://doc.rust-lang.org/std/convert/trait.AsRef.html

and https://doc.rust-lang.org/std/convert/trait.AsMut.html, respectively.


## goal
> 必要目标

快速通过

## trace
> 具体推进

还是要在 GPT 的辅助下掠过:

核心问题是完成函数:

```rust
fn num_sq<T>(arg: &mut T) {
    // TODO: Implement the function body.
    ???
}

// 对应的测试

    #[test]
    fn mult_box() {
        let mut num: Box<u32> = Box::new(3);
        num_sq(&mut num);
        assert_eq!(*num, 9);
    }

```

看起来就是对 arg 进行自乘而已

但是照猫画虎才发现:

```rust
fn num_sq<T>(arg: &mut T)
    where T: std::ops::Mul<Output = T> + std::ops::MulAssign + Copy
{
    let square = *arg * *arg;
    *arg *= *arg;
    *arg = square;
}
```

这样触发一系列问题:
```

error[E0277]: cannot multiply `Box<u32>` by `Box<u32>`
  --> exercises/conversions/as_ref_mut.rs:86:16
   |
86 |         num_sq(&mut num);
   |         ------ ^^^^^^^^ no implementation for `Box<u32> * Box<u32>`
   |         |
   |         required by a bound introduced by this call
   |
   = help: the trait `Mul` is not implemented for `Box<u32>`
note: required by a bound in `num_sq`
  --> exercises/conversions/as_ref_mut.rs:47:14
   |
46 | fn num_sq<T>(arg: &mut T)
   |    ------ required by a bound in this
47 |     where T: std::ops::Mul<Output = T> + std::ops::MulAssign + Copy
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `num_sq`

error[E0277]: cannot multiply-assign `Box<u32>` by `Box<u32>`
  --> exercises/conversions/as_ref_mut.rs:86:16
   |
86 |         num_sq(&mut num);
   |         ------ ^^^^^^^^ no implementation for `Box<u32> *= Box<u32>`
   |         |
   |         required by a bound introduced by this call
   |
   = help: the trait `MulAssign` is not implemented for `Box<u32>`
note: required by a bound in `num_sq`
  --> exercises/conversions/as_ref_mut.rs:47:42
   |
46 | fn num_sq<T>(arg: &mut T)
   |    ------ required by a bound in this
47 |     where T: std::ops::Mul<Output = T> + std::ops::MulAssign + Copy
   |                                          ^^^^^^^^^^^^^^^^^^^ required by this bound in `num_sq`

error[E0277]: the trait bound `Box<u32>: Copy` is not satisfied
  --> exercises/conversions/as_ref_mut.rs:86:16
   |
86 |         num_sq(&mut num);
   |         ------ ^^^^^^^^ the trait `Copy` is not implemented for `Box<u32>`
   |         |
   |         required by a bound introduced by this call
   |
note: required by a bound in `num_sq`
  --> exercises/conversions/as_ref_mut.rs:47:64
   |
46 | fn num_sq<T>(arg: &mut T)
   |    ------ required by a bound in this
47 |     where T: std::ops::Mul<Output = T> + std::ops::MulAssign + Copy
   |                                                                ^^^^ required by this bound in `num_sq`

error: aborting due to 3 previous errors

```

因为 Box<T> 类型没有实现 std::ops::Mul 和 std::ops::MulAssign trait。你可以使用 Deref trait 来解引用 Box<T> 类型的值，然后再对值进行乘法运算和赋值操作。

建议修改后的代码:

```rust
fn num_sq<T>(arg: &mut T)
where
    T: std::ops::Deref<Target = u32> + std::ops::DerefMut,
{
    let square = **arg * **arg;
    **arg = square;
}
```

在这个版本的代码中，T 类型必须实现 std::ops::Deref 和 std::ops::DerefMut trait，这样就可以使用解引用操作符 * 来获取 Box<T> 类型内部的值，并进行乘法运算和赋值操作了。

值得注意的是，在这个版本的代码中，我们不需要显式地实现 Copy trait，因为 u32 类型已经实现了 Copy trait，而 T 类型需要实现 Deref<Target = u32> trait，所以也就具有了 Copy trait 的能力。

而以上提示是换了3种姿势, 才诱使 GPT 给出的,
之前绕的方向更加无解...


所以, 这也只能是一个特殊场景,
如果是自己实现的话, 一定要使用对应合理的内置类型, 不折腾.


## refer.
> 关键参考

[学习 Rust - Rust 程序设计语言](https://github.com/rust-lang/rustlings/)


## logging
> 版本记要

- ..
- 230330 ZQ init.



```
          _~--^~_
      \) /  ◴ ◵  \ ()
        '_   ▽   _'
        | '--#--' )

...act by ferris-actor v0.2.4 (built on 23.0303.201916)
```

]]></content:encoded></item></channel></rss>